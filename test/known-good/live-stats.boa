m: output collection[string][int] of string;

no_nodes: output collection[string] of int;

p: Project = input;
path : output collection[int][string] of int;
# program analysis output
type T= {gen: set of string, kill: set of string, in: set of string, out: set of string};

# cfg of the current method
cfg: CFG;

# current visiting cfg node
cur_cfg_node: CFGNode;

genset : set of string;
killset : set of string;

method_name : string;
file_name : string;
ii:=0;
no_fixp := 0;
max_stat_count:=0;
max_branch_count:=0;
max_loop_count:=0;
total_time : int;
project_name : string;

# parse node expression to see if a variable is defined or redefined
node_def := visitor {
	before expr:Expression -> {
		switch(expr.kind) {
			case ExpressionKind.VARDECL: 
				var_decls := cur_cfg_node.expression.variable_decls;
				if(len(var_decls)!=0) {
					add(killset, var_decls[0].name);
				}				
				break;
			case ExpressionKind.ASSIGN: 
				exprs := cur_cfg_node.expression.expressions;
				if(len(exprs)!=0) {				
					add(killset, exprs[0].variable);
				}
				break;
			default:
				break;
		}
	}
};

# parse node expression to see if a variable is used or not
node_use := visitor {
	before expr:Expression -> {
		if(def(expr.variable)) {
			add(genset, expr.variable);			
		}
	}
};

# traversal that gets all variable uses in a method
cfg_use := traversal(node: CFGNode): T {
	cur_value : T;
	init_set : set of string;
	genset = init_set;
	if(def(node.expression)) {
		visit(node.expression, node_use);
	}
	init_set1 : set of string;
	cur_value = {genset, init_set1, init_set1, init_set1};
	return cur_value;
};

# traversal that gets all variable defs in a method
cfg_def := traversal(node: CFGNode): T {
	cur_value := getValue(node);
	init_set : set of string;
	killset = init_set;	
	if (def(node.expression)) {
		cur_cfg_node = node;
		visit(node.expression, node_def);
	}
	cur_value.kill = killset;
	return cur_value;
};

# cfg live variable analysis
live := traversal(node: CFGNode): T {
	no_fixp = no_fixp + 1;
	succs:=getSuccs(cfg, node);
	cur_val := getValue(node);
	foreach(i:int;def(succs[i])) {
		succ := getValue(succs[i]);
		cur_val.out = union(cur_val.out,succ.in);
	}
	cur_val.in = union(cur_val.gen, setdifference(cur_val.out, cur_val.kill));
	return cur_val;
};

# print results
live_var_result := traversal(node: CFGNode): T {
	m[method_name][node.id] << string(getValue(node).in);
};

# user-defined fix point function that is used for analysis termination.
fixp := function(curr: T, prev: T) : bool {
	if (difference(curr.in, prev.in) == 0)
		return true;	
	return false;
};

q_all := visitor {
	before n: Project -> {
		project_name=n.name;
	}

	before n: ChangedFile -> {
		file_name=n.name;
	}
	before node: CodeRepository -> {
		snapshot := getsnapshot(node, "SOURCE_JAVA_JLS");
		foreach (i: int; def(snapshot[i]))
			visit(snapshot[i]);
		stop;
	}

	before node: Method -> {
		ii=ii+1;
		method_name = node.name;
		cur_time:=currentTime();
		cfg = getcfg(node);
		traverse(cfg, TraversalKind.DEEP_ITERATIVE, cfg_use);
		traverse(cfg, TraversalKind.SHALLOW_ITERATIVE, cfg_def);
		no_fixp = 0;
		traverse(cfg, TraversalKind.BACKWARD, live, "fixp");
		total_time = currentTime()-cur_time;
		#traverse(cfg, TraversalKind.SHALLOW_ITERATIVE, live_var_result);
	}
	after node: Method -> {
		if(no_fixp!=0 && len(cfg.nodes)!=0) {
			no_nodes[method_name +string(ii)+","+string(len(cfg.nodes))+","+string(max_stat_count)+","+string(max_branch_count)+","+string(max_loop_count)+","+string((no_fixp+1)/len(cfg.nodes))] <<  total_time;
			#max_stat << project_name+", "+file_name+", "+method_name+string(ii) weight (no_fixp+1)/len(cfg.nodes);
		}
		max_stat_count=0;
		max_branch_count=0;
		max_loop_count=0;
	}
	before node: Statement -> {
		max_stat_count=max_stat_count+1;	
		switch(node.kind) {
			case StatementKind.IF,StatementKind.SWITCH: 
				max_branch_count=max_branch_count+1;
				break;
			case StatementKind.FOR,StatementKind.DO,StatementKind.WHILE: 
				max_loop_count=max_loop_count+1;
				break;
			default:
				break;
		}
	}
};

visit(p, q_all);
