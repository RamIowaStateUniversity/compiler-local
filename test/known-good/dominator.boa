m: output collection[string][string][int] of string;
p: Project = input;

method_name: string;
dom: map[int] of set of string;
prev_dom:map[int] of set of string;
self_dom: map[int] of set of string;
cfg: CFG;
cur_node:int;
temp_id:int;
flag:=0;
initial_dom:set of string;

cfg_dom := cfgvisitor {
	before node:CFGNode -> {
		cur_node = node.id;
		if(cur_node!=0) {
			prev_dom[cur_node]=lookup(dom,cur_node);
			parents:=getparents(cfg, node);
			dom_parents:=initial_dom;
			foreach(i:int;def(parents[i])) {
				pid:=parents[i].id;
				 dom_parents = intersection(dom_parents,lookup(dom,pid));
			}			
			dom[cur_node] = union(dom_parents,lookup(self_dom,cur_node));
		}
	}

	after node:CFGNode -> {
		if(!(isseteq(lookup(dom,cur_node),lookup(prev_dom,cur_node)))) {
			flag=1;				
		}
	}
};

q_all := visitor {
	
	before node: Method -> {
		clear(initial_dom);
		clear(dom);
		clear(prev_dom);
		method_name=node.name;
		if(method_name=="toBinary") {
			cfg = getcfg(node);

			foreach(i:int;def(cfg.nodes[i])) {
				add(initial_dom,string(cfg.nodes[i].id));
			}

			foreach(i:int;def(cfg.nodes[i])) {
				temp_id=cfg.nodes[i].id;
				dom[temp_id]=initial_dom;
			}
			foreach(i:int;def(cfg.nodes[i])) {
				temp_id=cfg.nodes[i].id;
				start_dom:set of string;
				add(start_dom,string(temp_id));
				self_dom[temp_id]=start_dom;
			}

			dom[0]=lookup(self_dom,0);
			prev_dom[0]=lookup(self_dom,0);
			do{
				flag=0;
				visit(cfg,false,cfg_dom);
			}while(flag==1);

			foreach(i:int;def(cfg.nodes[i])) {
				temp_id=cfg.nodes[i].id;
				m["dom"][method_name][temp_id] << string(lookup(dom,temp_id));
			}
		}
		stop;
	}
};

visit(p, q_all);
