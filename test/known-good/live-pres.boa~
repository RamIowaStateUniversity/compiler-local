m: output collection[string][int] of string;
mt : output collection of int;
p: Project = input;

# program analysis output
type T_gen= {gen: set of string};
type T_kill= {kill: set of string};
type T_inout= {in: set of string, out: set of string};

# current visiting cfg node
cur_cfg_node: CFGNode;

genset : set of string;
killset : set of string;

method_name : string;

# parse node expression to see if a variable is defined or redefined
node_def := visitor {
	before expr:Expression -> {
		switch(expr.kind) {
			case ExpressionKind.VARDECL: 
				var_decls := cur_cfg_node.expr.variable_decls;
				if(len(var_decls)!=0) {
					add(killset, splitall(var_decls[0].name,"\\.")[0]);
				}				
				break;
			case ExpressionKind.ASSIGN, ExpressionKind.OP_INC: 
				exprs := cur_cfg_node.expr.expressions;
				if(len(exprs)!=0) {				
					add(killset, splitall(exprs[0].variable,"\\.")[0]);
				}
				break;
			default:
				break;
		}
	}
};

# parse node expression to see if a variable is used or not
node_use := visitor {
	before expr:Expression -> {
		if(def(expr.variable)) {
			if(len(expr.expressions)!=0) {
				add(genset, "this."+expr.variable);
			}
			else {
				add(genset, splitall(expr.variable,"\\.")[0]);
			}
		}
	}
};

# traversal that gets all variable uses in a method
cfg_use := traversal(node: CFGNode): T_gen {
	cur_value : T_gen;
	clear(genset);
	if(def(node.expr)) {
		visit(node.expr, node_use);
	}
	cur_value = {genset};
	return cur_value;
};

# traversal that gets all variable defs in a method
cfg_def := traversal(node: CFGNode): T_kill {
	cur_value : T_kill;
	clear(killset);	
	if (def(node.expr)) {
		cur_cfg_node = node;
		visit(node.expr, node_def);
	}
	cur_value = {killset};
	return cur_value;
};

# cfg live variable analysis
live := traversal(node: CFGNode): T_inout {
	succs := getSuccs(node);
	in_set : set of string;
	out_set : set of string;
	cur_val : T_inout = {in_set, out_set};
	if(def(getValue(node))) {
		cur_val1 := getValue(node);
		cur_val = clone(cur_val1);
	}
	foreach(succ_node:CFGNode=succs) {
		succ := getValue(succ_node);
		if(def(succ)) {
			cur_val.out = union(cur_val.out,succ.in);
		}
	}
	genTuple := getValue(node, cfg_use);
	killTuple := getValue(node, cfg_def);
	cur_val.in = union(genTuple.gen, setdifference(cur_val.out, killTuple.kill));
	return cur_val;
};

# print results
live_var_result := traversal(node: CFGNode) {
	cur_value := getValue(node, live);
	m[method_name][node.id] << string(cur_value.in);
};

# user-defined fix point function that is used for analysis termination.
fixp1 := fixp(curr, prev: T_inout) : bool {
	if (difference(curr.in, prev.in) == 0)
		return true;	
	return false;
};

q_all := visitor {
	before node: ChangedFile -> {
		file_name = node.name;
	}
	before node: CodeRepository -> {
		snapshot := getsnapshot(node, "SOURCE_JAVA_JLS");
		foreach (i: int; def(snapshot[i]))
			visit(snapshot[i]);
		stop;
	}
	before node: Method -> {
		method_name = node.name;
		cfg := getcfg(node);
		clear(cfg_use);clear(cfg_def);clear(live);
		traverse(cfg, TraversalKind.DEEP_ITERATIVE, cfg_use);
		traverse(cfg, TraversalKind.SHALLOW_ITERATIVE, cfg_def);
		traverse(cfg, TraversalKind.BACKWARD, live, fixp1);
		traverse(cfg, TraversalKind.BACKWARD, live_var_result);
	}
};

visit(p, q_all);
