m: output collection[string][int] of string;

p: Project = input;

# program analysis output
type T= {gen: set of string, kill: set of string, in: set of string, out: set of string};

# cfg of the current method
cfg: CFG;

# current visiting cfg node
cur_cfg_node: CFGNode;

genset : set of string;
killset : set of string;

method_name : string;

# parse node expression to see if a variable is defined or redefined
node_def := visitor {
	before expr:Expression -> {
		switch(expr.kind) {
			case ExpressionKind.VARDECL: 
				var_decls := cur_cfg_node.expression.variable_decls;
				if(len(var_decls)!=0) {
					add(killset, var_decls[0].name);
				}				
				break;
			case ExpressionKind.ASSIGN: 
				exprs := cur_cfg_node.expression.expressions;
				if(len(exprs)!=0) {				
					add(killset, exprs[0].variable);
				}
				break;
			default:
				break;
		}
	}
};

# parse node expression to see if a variable is used or not
node_use := visitor {
	before expr:Expression -> {
		if(def(expr.variable)) {
			add(genset, expr.variable);			
		}
	}
};

# traversal that gets all variable uses in a method
cfg_use := traversal(node: CFGNode): T {
	cur_value : T;
	init_set : set of string;
	genset = init_set;
	if(def(node.expression)) {
		visit(node.expression, node_use);
	}
	init_set1 : set of string;
	cur_value = {genset, init_set1, init_set1, init_set1};
	return cur_value;
};

# traversal that gets all variable defs in a method
cfg_def := traversal(node: CFGNode): T {
	cur_value := getValue(node);
	init_set : set of string;
	killset = init_set;	
	if (def(node.expression)) {
		cur_cfg_node = node;
		visit(node.expression, node_def);
	}
	cur_value.kill = killset;
	return cur_value;
};

# cfg live variable analysis
live := traversal(node: CFGNode): T {
	succs:=getSuccs(cfg, node);
	cur_val := getValue(node);
	foreach(i:int;def(succs[i])) {
		succ := getValue(succs[i]);
		cur_val.out = union(cur_val.out,succ.in);
	}
	cur_val.in = union(cur_val.gen, setdifference(cur_val.out, cur_val.kill));
	return cur_val;
};

# print results
live_var_result := traversal(node: CFGNode) {
	cur_value := getValue(node);
	m[method_name][node.id] << string(cur_value.in);
};

# user-defined fix point function that is used for analysis termination.
fixp_in := fixp(curr, prev: T) : bool {
	if (difference(curr.in, prev.in) == 0)
		return true;	
	return false;
};

q_all := visitor {
	before node: Method -> {
		method_name = node.name;
		cfg = getcfg(node);
		map1 := traverse(cfg, TraversalKind.DEEP_ITERATIVE, cfg_use);
		map2 := traverse(cfg, TraversalKind.SHALLOW_ITERATIVE, map1, cfg_def);
		map2 = traverse(cfg, TraversalKind.BACKWARD, map2, live, fixp_in);
		traverse(cfg, TraversalKind.SHALLOW_ITERATIVE, map2, live_var_result);
	}
};

visit(p, q_all);
