m: output collection[string][string][int] of string;
p: Project = input;

# program analysis output
type T= {dom: set of string, com: set of string};
	
# cfg of the current method
cfg: CFG;

#set of all cfgnode ids
cfgnode_ids:set of string;

method_name : string;

file_name : string;
ii:=0;

# traversal to collect all cfgnode ids
allnode_ids := traversal(node: CFGNode) {
	add(cfgnode_ids, string(node.id));
};


# traversal that initializes dominator set of cfg nodes
cfg_dom_init := traversal(node: CFGNode): T {
	cur_value : T;	
	if(node.id==0) {
		self_dom:set of string;
		add(self_dom, string(node.id));
		cur_value = {self_dom, self_dom};
	}
	else {
		cur_value = {cfgnode_ids, cfgnode_ids};
	}
	return cur_value;
};

# traversal that constructs dominator set of cfg node
cfg_dom := traversal(node: CFGNode): T {
	cur_value:=getValue(node);
	start_dom:set of string;
	add(start_dom, string(node.id));
	if(node.id!=0) {
		preds:=getPreds(cfg, node);
		foreach(i:int;def(preds[i])) {
			cur_value.dom = intersection(cur_value.dom,getValue(preds[i]).dom);
		}	
		cur_value.dom = union(cur_value.dom, start_dom);
	}
	return cur_value;
};

# user-defined fix point function that is used for analysis termination.
fixp := function(curr: T, prev: T) : bool {
 	if (difference(curr.dom, prev.dom) == 0)
 		return true;	
 	return false;
};

# print results
dom_result := traversal(node: CFGNode): T {
	m[file_name][method_name][node.id] << string(getValue(node).dom);
};

q_all := visitor {
	before n: Project -> {
		file_name=n.name;
	}

	before node: CodeRepository -> {
		snapshot := getsnapshot(node, "SOURCE_JAVA_JLS");
		foreach (i: int; def(snapshot[i]))
			visit(snapshot[i]);
		stop;
	}

	before node: Method -> {
		ii++;
		method_name = node.name;
		clear(cfgnode_ids);
		cfg = getcfg(node);
		traverse(cfg, TraversalKind.SHALLOW_ITERATIVE, allnode_ids);
		traverse(cfg, TraversalKind.SHALLOW_ITERATIVE, cfg_dom_init);
		traverse(cfg, TraversalKind.SHALLOW_ITERATIVE, cfg_dom, "fixp");
		traverse(cfg, TraversalKind.SHALLOW_ITERATIVE, dom_result);
	}
};

visit(p, q_all);
