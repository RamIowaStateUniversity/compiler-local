p: Project = input;
m: output collection[string][int] of string;

# program analysis output
type T= {gen: set of string, kill: set of string, in: set of string, out: set of string};

# cfg of the current method
cfg: CFG;

# current visiting cfg node and its id
cur_node_id: int;
cur_cfg_node: CFGNode;

# generated values set
genset: set of string;

# new value
vardef: string;

# killed values 
killset: set of string;

method_name : string;
# 
flag1 := 0;

# expression visitor to generate new values
evisitor := visitor {
	before node:Expression -> {
		switch(node.kind) {
			case ExpressionKind.VARDECL, ExpressionKind.ASSIGN: 
				add(genset, string(cur_node_id));
  				break;
			default: break;
		}
	}
};

# traversal that accumulates generated values
cfg_def := traversal(node: CFGNode): T {
		cur_node_id = node.id;
		cur_value :T; 
		init_set : set of string;
		genset = init_set;
		if (def(node.expression)) {
			visit(node.expression, evisitor);
		}
		cur_value = {genset, init_set, init_set, init_set};
		return cur_value;
};

# parse node expression to see if a variable if defined or redefined
node_def := visitor {
	before node:Expression -> {
		switch(node.kind) {
			case ExpressionKind.VARDECL: 
				t := cur_cfg_node.expression.variable_decls;
				if(len(t)!=0) {
					vardef = t[0].name;
				}				
				break;
			case ExpressionKind.ASSIGN: 
				t1 := cur_cfg_node.expression.expressions;
				if(len(t1)!=0) {
					vardef = t1[0].variable;
				}
				break;
			default:
				flag1 = 1; 
				break;
		}
	}
};

# update values that are killed
node_kill := visitor {
	before node:Expression -> {
		switch(node.kind) {
			case ExpressionKind.VARDECL: 
				t2 := cur_cfg_node.expression.variable_decls;
				if(len(t2)!=0) {
					if (t2[0].name == vardef) {
						add(killset, string(cur_cfg_node.id));
					}
				}				
				break;
			case ExpressionKind.ASSIGN: 
				t3 := cur_cfg_node.expression.expressions;
				if(len(t3)!=0) {
					if (t3[0].variable == vardef) {
						add(killset, string(cur_cfg_node.id));
					}
				}
			default:
				break;
		}
	}
};

# traversal that gets all variable uses in a method
cfg_use := traversal(node: CFGNode): T {
		cur_value := getValue(node);
		init_set : set of string;
		killset = init_set;	
		vardef = "";
		if (def(node.expression)) {
			cur_cfg_node = node;
			visit(node.expression, node_def);
			if (flag1 == 0) {
				foreach(j:int; def(cfg.nodes[j])) {
					if (def(cfg.nodes[j].expression) && cfg.nodes[j].id != node.id) {
						cur_cfg_node = cfg.nodes[j];
						visit(cfg.nodes[j].expression, node_kill);
					}
				}
			}
			flag1=0;
		}
		cur_value.kill = killset;
		return cur_value;
};

# cfg reaching definition analysis
cfg_reach_def := traversal(n: CFGNode): T {
		preds := getPreds(cfg, n);
		cur_val := getValue(n);
		foreach (i:int; def(preds[i])) {	
			pred := getValue(preds[i]);
			cur_val.in = union(cur_val.in, pred.out);
		}
		cur_val.out = union(cur_val.gen, setdifference(cur_val.in, cur_val.kill));
		return cur_val;
};

# print results
reach_def_result := traversal(n: CFGNode): T {
		m[method_name][n.id] << string(getValue(n).out);
};

# user-defined fix point function that is used for analysis termination.
fixp := function(curr: T, prev: T) : bool {
	if (difference(curr.out, prev.out) == 0)
		return true;	
	return false;
};

reach_def := visitor {
	before node: Method -> {
		method_name = node.name;
		cfg = getcfg(node);
		traverse(cfg, TraversalKind.DEEP_ITERATIVE, cfg_def);
		traverse(cfg, TraversalKind.DEEP_ITERATIVE, cfg_use);
		traverse(cfg, TraversalKind.FORWARD, cfg_reach_def, "fixp");
		traverse(cfg, TraversalKind.SHALLOW_ITERATIVE, reach_def_result);
	}
};

visit(p, reach_def);
