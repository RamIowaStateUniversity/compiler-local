m: output collection[string][string][int] of string;
p: Project = input;

method_name: string;
gen: map[int] of set of string;
kill: map[int] of set of string;
q_in: map[int] of set of string;
q_out: map[int] of set of string;
prev_out:map[int] of set of string;
cfg: CFG;
cur_node:int;
temp_id:int;
flag:=0;
flag1:=0;
vardefined: set of string;
vardef: string;
cur_cfg_node:CFGNode;
varkilled: set of string;

cfg_def := traversal {
	
	before node: CFGNode -> {
		temp_id=node.id;
		init_set1: set of string;
		q_in[temp_id]=init_set1;
		q_out[temp_id]=init_set1;
		prev_out[temp_id]=init_set1;
		init_set: set of string;
		vardefined=init_set;
		if(def(node.expression)) {
			traverse(node.expression);
		}
		gen[temp_id]=vardefined;
	}

	when node:Expression && (node.kind==ExpressionKind.VARDECL || node.kind==ExpressionKind.ASSIGN) -> {
		add(vardefined,string(cur_node_id));
	}
	when node:Expression && (node.kind==ExpressionKind.ASSIGN) -> {
		add(vardefined,string(cur_node_id));
	}
};

node_def :=traversal {
	when node: Expression -> {
		switch (node.kind) {
			case ExpressionKind.VARDECL:
				t:=cur_cfg_node.expression.variable_decls;
				vardef=t[0].name;
				break;
			case ExpressionKind.ASSIGN:
				t1:=cur_cfg_node.expression.expressions;
				vardef=t1[0].variable;
				break;
			default:
				flag1=1;
				break;
		}
	}
};

node_kill :=traversal {
	when node: Expression -> {
		switch (node.kind) {
			case ExpressionKind.VARDECL:
				t2:=cur_cfg_node.expression.variable_decls;
				if(t2[0].name==vardef) {
					add(varkilled,string(cur_cfg_node.id));
				}
				break;
			case ExpressionKind.ASSIGN:
				t3:=cur_cfg_node.expression.expressions;
				if(t3[0].variable==vardef) {
					add(varkilled,string(cur_cfg_node.id));
				}
				break;
			default:
				break;
		}
	}
};

cfg_use := traversal {
	
	before node: CFGNode -> {
		temp_id=node.id;
		new_set: set of string;
		varkilled=new_set;
		vardef="";
		if(def(node.expression)) {
			cur_cfg_node=node;
			traverse(node.expression,node_def);
			if(flag1==0) {
				foreach(j:int;def(cfg.nodes[j])) {
					if(def(cfg.nodes[j].expression) && cfg.nodes[j].id!=node.id) {
						cur_cfg_node=cfg.nodes[j];
						traverse(cfg.nodes[j].expression,node_kill);
					}
				}
			}
			flag1=0;
		}
		kill[temp_id]=varkilled;
	}
};

cfg_reach_def := traversal {
	before node:CFGNode -> {
		cur_node = node.id;
		parents:=getparents(cfg, node);
		foreach(i:int;def(parents[i])) {
			pid:=parents[i].id;
			q_in[cur_node] = union(lookup(q_in,cur_node),lookup(q_out,pid));
		}
		prev_out[cur_node]=lookup(q_out,cur_node);
		q_out[cur_node] = union(lookup(gen,cur_node),setdifference(lookup(q_in,cur_node),lookup(kill,cur_node)));
	}

	after node:CFGNode -> {
		if(!(isseteq(lookup(q_out,cur_node),lookup(prev_out,cur_node)))) {
			flag=1;			
		}
	}
};

reach_def_result := traversal {
	before node:CFGNode -> {
		temp_id=node.id;
		m["out"][method_name][temp_id] << string(lookup(q_out,temp_id));
		stop;
	}
};

def := visitor {
	before node: Method -> {
		method_name=node.name;
		if(method_name=="dead2") {
			cfg = getcfg(node);
			traverse(cfg,TraversalKind.ITERATIVE,cfg_def);
		}
		stop;
	}
};

use := visitor {
	
	before node: Method -> {
		method_name=node.name;
		if(method_name=="dead2") {
			cfg = getcfg(node);
			traverse(cfg,TraversalKind.ITERATIVE,cfg_use);
		}
		stop;
	}
};

reach_def := visitor {
	
	before node: Method -> {
		method_name=node.name;
		if(method_name=="dead2") {
			cfg = getcfg(node);
			do{
				flag=0;
				traverse(cfg,TraversalKind.FORWARD,cfg_reach_def);
			}while(flag==1);

			traverse(cfg,TraversalKind.ITERATIVE,reach_def_result);
		}
		stop;
	}
};

visit(p, def);
visit(p, use);
visit(p, reach_def);
